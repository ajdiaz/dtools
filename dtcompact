#! /bin/bash
# Distributed Tools - dtools - dthost
# Copyright (C) 2008 Andrés J. Díaz <ajdiaz@connectical.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

${DEBUG:+set -x}
DTOOLS_LIB="${DTOOLS_LIB:-/usr/lib/dtools}"
LC_ALL=C; LANG=C; export LANG LC_ALL

# Some usefull functions to everybody, declared here to be accesible for all
# script and modules. We keep here check functions and error dispatchers.
err () { echo "${R}fail${N}::$(basename $0):$@" >&2  &&  ${E:+exit $E}; }
req () { type -p "$1" 2>/dev/null >/dev/null; }
lib () { source "${DTOOLS_LIB}/$1" 2>/dev/null >/dev/null; }
cap () { tput "$1" 2>/dev/null >/dev/null; }

fail () { echo "${R}fail${N}::dt:${B}$1${N}:${H}$2${N}:$3" ; }

# Define colors if capability is present in tty and if -N option is no
# present in command line.
if cap colors && ${opt_N:-true}; then
	H=$'\e[0;1m'
	N=$'\e[0;0m'
	R=$'\e[31;1m'
	G=$'\e[32;1m'
fi

let okay=0
let fail=0
let unkn=0
let sums=0

messages=()

oldIFS=$IFS
export IFS=':'
while read -r status null dt command hostname message ; do
	case "$status" in
		okay) echo -n "${G}.${N}"; ((okay++));;
		fail)
			echo -n "${R}!${N}";
			messages[${#messages[@]}]="$(fail "$command" "$hostname" "$message")";
			((fail++));;
		*) echo -n "${H}?${N}";    ((unkn++));;
	esac
	((sums++))
done

if [ ${okay} -gt 0 ] || [ ${fail} -gt 0 ] || [ ${unkn} -gt 0 ]; then
	printf "\n\n"
fi

printf "%-20s%5s\n" "${H}Total:${N}" "${sums}"
printf "%-20s%5s     [%4s]\n" "${H}Okay:${N}" "${okay}" "$((okay * 100 / sums))%"
printf "%-20s%5s     [%4s]\n" "${H}Fail:${N}" "${fail}" "$((fail * 100 / sums))%"
printf "%-20s%5s     [%4s]\n" "${H}Unknown:${N}" "${unkn}" "$((unkn * 100 / sums))%"

if [ ${fail} -gt 0 ]; then
	printf "\n%-20s\n" "${H}Failed errors:${N}"
	for m in "${messages[@]}"; do
		echo "${m}"
	done
fi

