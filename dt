#! /bin/bash
# vim:et:
# Distributed tools; http://connectical.com/projects/dtools
# Copyright (C) 2008-2010 Andres J. Diaz <ajdiaz@connectical.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Some usefull functions to everybody, declared here to be accesible for all
# script and modules. We keep here check functions and error dispatchers.
err () { echo "${R}fail${N}::$(basename $0):$@" >&2 && eval ${E:+exit $E}; }
req () { type -p "$1" 2>/dev/null >/dev/null; }
lib () { source ~/.dtools/"$1" 2>/dev/null >/dev/null || \
         source ./lib/"$1" 2>/dev/null >/dev/null || \
	       source "${DTOOLS_LIB}/$1" 2>/dev/null >/dev/null; }
fun () { declare -F "$1" 2>/dev/null >/dev/null; }
cap () { tput "$1" 2>/dev/null >/dev/null; }
use () { lib "${1//.//}" || source ${1}.dt 2>&1 >/dev/null; }

# Enablig debug if DEBUG environment variable is present. This will be more
# verbose than you expect...
${DEBUG:+set -x}

# Set the default library directory for dtools, if the DTOOLS_LIB variable
# exists in the environment is used, otherwise point to default location.
DTOOLS_LIB="${DTOOLS_LIB:-/usr/lib/dtools}"

# Set the default database file for dtools. TODO the database as loaders, in
# the future other database backend must be supported too.
DTOOLS_DB=~/.dtdb
DEFAULT_DTOOLS_DB=$DTOOLS_DB

# Check that we have bash >= 4. We required new bash enhancement for
# dtools >= 3. Prior code is bash < 4 compatible (AFAIK). Also check for
# enhanced getopt.
[ ${BASH_VERSINFO:-0} -ge 4 ] || E=1 err "required bash version >= 4"
req getopt || E=1 err "enhanced getopt is required"

# Begin the API Definition. The dtools API is divided in three parts, the
# **message** api (based in OMNI syntax), the **command** API which will
# be used for modules to implement actions or patterns and the **helper**
# API, used internally.

# fun: okay <command> <host> [message]
# txt: return an OMNI okay message for command on host
# api: message
okay () { echo "${G}okay${N}::$dt:${B}$1${N}:${H}$2${N}:$3" ; }

# fun: fail <command> <host> [message]
# txt: return an ONMI fail message for command on host
# api: message
fail () { echo "${R}fail${N}::$dt:${B}$1${N}:${H}$2${N}:$3" ; }

# fun: info <command> <host> [message]
# txt: return an ONMI info message for command on host
# api: message
info () { echo "${B}info${N}::$dt:${B}$1${N}:${H}$2${N}:$3" ; }

# fun: user <command> <host> [type] [message]
# txt: ask to the user for a stdin input.
# api: message
user () {
	echo -n "${M}type${N}:$3:$dt:${B}$1${N}:${H}$2${N}:${4:+$4:}" >&3
}

# fun: pattern <label> <fun>
# txt: define a new pattern for label passed as argument, when pattern is
#      present on command line, then the function 'fun' is called with all
#      values as argument, for example for label exp, and argument exp:.*,
#      then the function 'fun' will be called with .* as argument (note that
#      the argument is never expanded automatically.
# api: commands
pattern () { pattern[$1]="$2"; }
declare -A pattern

# fun: help [item]
# txt: display a help message for item passed as argument or, if none
#      argument is supplied print a general help message.
# api: commands
help() {
	help() { echo "$2"; }

	[ "$1" ] && source "${DTOOLS_LIB}/commands/$1.bash" 2>/dev/null \
	         || source "${DTOOLS_LIB}/patterns/$1.bash" 2>/dev/null \
	         || echo "$help"
}

# fun: list-commands
# txt: report a list of available commands (plugins for dtools) with a tiny
#      description line.
# api: helper
list-commands ()
{
	local f=
	local s=

	help () { s="$1"; }
		for f in ~/.dtools/commands/*.bash \
    			   ./lib/commands/*.bash ${DTOOLS_LIB}/commands/*.bash; do
        source "$f" 2>/dev/null >/dev/null
        local f="${f##*/}"
        local f="${f%.bash}"
        [ "$f" == "*" ] && continue
        printf "  %-21s%s\n" "$f" "$s"
    done
}

# fun: list-patterns
# txt: report a list of available patterns (plugins for dtools) with a tiny
#      description line.
# api: helper
list-patterns ()
{
	local f=
	local s=

	help () { s="$1"; }
		for f in ~/.dtools/patterns/*.bash \
    			   ./lib/patterns/*.bash ${DTOOLS_LIB}/patterns/*.bash; do
        source "$f" 2>/dev/null >/dev/null
        local f="${f##*/}"
        local f="${f%.bash}"
        [ "$f" == "*" ] && continue
        printf "  %-21s%s\n" "$f" "$s"
    done
}

# fun: dt_pattern <patternlist>
# txt: return the list of hosts and tags whitch match with pattern list.
# api: helper
dt_pattern ()
{
	local oIFS="$IFS"
	IFS=:
	read pattern_key pattern_val other <<< "$1"
	IFS="$oIFS"

	if [ "${pattern[${pattern_key:=nil}]}" ] ; then
		if [ "${other}" ] ; then
			${pattern[$pattern_key]} "$pattern_val" "${other}" | \
				DTOOLS_DB=/dev/stdin dt_pattern "$other"
		else
			${pattern[$pattern_key]} "$pattern_val"
		fi
	else
		dt_pattern "sys" "${pattern_val}"
	fi
}

# fun: dt_pattern_filter <patternlist>
# txt: return the list of hosts which match with pattern list.
# api: helper
dt_pattern_filter ()
{
	for pattern in ${1//+/ }; do
		dt_pattern "$pattern" | cut -d' ' -f1
	done | sort | uniq
}

# fun: dt_replace <string>
# txt: escape special characters to be printable in one line omni output
# api: helper
dt_replace ()
{
	local r="${1//$'\n'/\\n}"
	local r="${r//$'\r'/\\r}"
	local r="${r%\\n}"
	local r="${r%\\r}"

	echo "$r"
}

# fun: dt_run <host> [arguments]
# txt: run loaded command for host passing arguments if present.
# api: helper
dt_run ()
{
  local h="$1" ; shift

  ret="$(run "${h}" "$@" 2>&1)" &&
  	  okay "$command" "${h}" "$(dt_replace "$ret")" ||
	  fail "$command" "${h}" "$(dt_replace "$ret")"
}

# fun: dt_bye
# txt: kill all currently working coprocs and exits with 0 status code
#      (interrupted). This function will be used in EXIT.
# api: helper
dt_bye ()
{
	for pid in "${pids[@]}" ; do
        kill -- -$(ps opgid= "$pid") 2>/dev/null;
	done

	wait "${pids[@]}"
	exit ${SUCCESS:-130}
}

# fun: dtdb_dump
# txt: dump the dtools db file to stdout
# api: commands
dtdb_dump () { cat "${DTOOLS_DB:-/dev/null}"; }

# fun: dtdb_host <host regex>
# txt: return the hosts in database which matched for the specified regular
#      expression.
# api: commands
dtdb_findhost ()
{
    if [ ${#HOSTLIST[@]} -eq 0 ]; then
        while read host tags ; do
            [ "${host:0:1}" == "#" ] && continue
            host="${host#@}"
            case "$(expr match "$host" "^$1[[:blank:]]*")" in
                0) ;;
                *) echo "$host $tags" ;;
            esac
        done < "${DTOOLS_DB:-/dev/null}"
    else
        for line in "${HOSTLIST[@]}"; do
            read host tags <<<"$line"
            [ "${host:0:1}" == "#" ] && continue
            host="${host#@}"
            case "$(expr match "$host" "^$1[[:blank:]]*")" in
                0) ;;
                *) echo "$host $tags" ;;
            esac
        done
    fi
}

# fun: dtdb_addhost <host> [tags]+
# txt: insert the specified host and tags to the dtools database.
# api: commands
dtdb_addhost ()
{
	echo "$@" >> "${DTOOLS_DB:-/dev/null}"
}

# fun: dtdb_addtag <host regex> [tags]+
# txt: tag the hosts which matched for the specified regular expression with
#      tag items in arguments.
# api: commands
dtdb_addtag ()
{
	local h="$1" ; shift
	mapfile -t DTDBTMP < "${DTOOLS_DB:-/dev/null}"

	for line in "${DTDBTMP[@]}" ; do
		read host tags <<<"$line"
	    [ "${host:0:1}" == "#" ] && continue
		host="${host#*@}"

		case "$(expr match "$host" "^$h[[:blank:]]*")" in
			0) echo "$host $tags" ;;
			*) echo "$host $tags $@" ;;
		esac
	done > "${DTOOLS_DB:-/dev/null}"
}

# fun: dtdb_deltag <host regex> [tags]+
# txt: detag the hosts which matched for the specified regular expression
# 	   for tag items in arguments.
# api: commands
dtdb_deltag ()
{
	local h="$1" ; shift
	mapfile -t DTDBTMP < "${DTOOLS_DB:-/dev/null}"

	for line in "${DTDBTMP[@]}" ; do
		read host tags <<<"$line"
	    [ "${host:0:1}" == "#" ] && continue
	    host="${host#@}"

		# if host found
		case "$(expr match "$host" "^$h[[:blank:]]*")" in
			0) echo "$host $tags" ;;
			*)
				# remove all ocurrences of tag in line
				local nt="${tags}"
				for t in "$@"; do
					nt="${nt/#$t /}"
					nt="${nt// $t /}"
					nt="${nt/% $t/}"
				done
				echo "$host $nt" ;;
		esac
	done > "${DTOOLS_DB:-/dev/null}"
}


# fun: _dtdb_findtag <-r <tag>>+
# txt: return the hosts which are tagged for specified tag. The -r prefix
#      reverse the search.
# api: helper
_dtdb_findtag ()
{
	shopt -s extglob

	opts="$@"
	while read host tags ; do
	    [ "${host:0:1}" == "#" ] && continue
	    host="${host#@}"

		set -- $opts
		while [ "$1" ] ; do
			case "$1" in
				-r|--reverse) op="!=" ; shift ; continue ;;
			esac

			eval "[[ '$1' ${op:-==} +(${tags// /|}) ]]" && echo "$host $tags"
			unset op
			shift
		done
	done | uniq
}

# fun: dtdb_findtag <tagop>
# txt: solve a tag operation passed as argument. Valid syntax for operations
#      is: tag[<op>tag[<op>tag]...]
#      Where op must be: OR (,), AND (+) or EXCEPT (-).
# api: commands
dtdb_findtag ()
{
    local exp="$1"
    local exp="${exp//-/ | _dtdb_findtag -r }"
    local exp="${exp//+/ | _dtdb_findtag }"
    local exp="${exp//,/ }"
    local exp="${exp//\(/\$\(_dtdb_findtag  }"
    local exp="${exp//\)/ }"
	cat "${DTOOLS_DB:-/dev/stdin}" | eval _dtdb_findtag $exp
}

# fun: dt_user <host_exp>
# txt: get the username from the host expression passed as argument, or
# 	   default user if not user available.
# api: commands
dt_user ()
{
	local r="${1%%|*}"
	local u="${r%%@*}"
	local u="${u%%:*}"
	local h="${r#*@}"
	local h="${h%%:*}"

	if [ "$u" == "$h" ]; then
		echo "${DTOOLS_USER:-${LOGNAME:-$(whoami)}}"
	else
		echo "${DTOOLS_USER:-$u}"
	fi
}

# fun: dt_host <host_expr>
# txt: get the host part of a host expression or fails if no host provided.
# api: commands
dt_host ()
{
	local r="${1%%|*}"
	local h="${r#*@}"
	local h="${h%%:*}"

	[ "$h" ] && echo "$h" || E=1 err "no host found in expression '$1'"
}

# fun: dt_port <host_expr>
# txt: get the port part of a host expression or fails if no port provided.
# api: commands
dt_port ()
{
	local r="${1%%|*}"
	local p="${r##*:}"
	[ "$p" != "$r" ] && echo "$p"
}

dt_proxy () {
	local  p="${1##*|}"
	[ "$p" != "${1}" ] && echo "$p"
}

# fun: dt_procname <expr>
# txt: convert expression in a proc safe name (no spaces, no dots etc).
# api: helper
dt_procname ()
{
	local r="${1//./_}"
	local r="${r// /_}"
	local r="${r//:/_}"
	local r="${r//@/_}"
	local r="${r//-/_}"
	local r="${r//|/_}"
	local r="${r//,/_}"
	echo -n "$r"
}


# The main help text which displayed on usage information. From this text
# probably we call to list-commands function to print available commands.
help="""usage:
  $0 [options] <pattern> <command> [arguments]+

options:
  -h X   --help X      display help about X command or this help screen.
  -D X   --db          use X as known_hosts database.
  -p     --pretend     pretend only and do nothing.
  -C X   --coproc X    use X coprocs (default:5).
  -T X   --timeout X   use X seconds of timeout (default:5).
  -i     --interactive interactive, an alias to -C 0
  -N     --no-color    supress color output

patterns:
$(list-patterns)

commands:
$(list-commands)

examples:

  dt exp:host.* list
  dt ec2:tag=Name=myhost-01 ping
  dt not:exp:host.* list
"""

OPTIONS=$(getopt -o "h:D:C:T:ipN" --long \
	"help:,db:,coproc:,timeout:,interactive,pretend,no-color" -- "$@")

# Abort if getopt fails to parse arguments in any way.
if [ $? != 0 ] ; then
	help >&2 && exit 1
fi

# Parse command line options.
eval set -- "$OPTIONS"; dt="$(basename $0)"
while [[ "$1" = -* ]]; do
    case "$1" in
    	-h|--help) help "$2"; exit 0 ;;
    	-p|--pretend) opt_p=true  ;;
    	-N|--no-color) opt_N=true ;;
    	-i|--interactive) interactive=true && opt_C=0 ;;
    	-D|--db) DTOOLS_DB="$2"; DEFAULT_DTOOLS_DB="$DTOOLS_DB"  ; shift ;;
    	-C|--coproc)  opt_C="$2"  ; shift ;;
    	-T|--timeout) opt_T="$2"  ; shift ;;
        --) shift ; break ;;
        *) echo "$1" ; help >&2 && exit 1
    esac
    shift
done

# Cappable colors if available for terminal and option -N is not present in
# arguments.
if ${opt_N:-false} ; then
	H=
	N=
	R=
	G=
	B=
	Y=
	M=
elif cap colors ; then
	# Setting colors if terminal supported them, on redirection to file
	# a --no-color option might be provided in command line.
	if [ "${DTOOLS_COLORS}" ]; then {
		IFS=:
		for color in ${DTOOLS_COLORS}; do
			case "${color%=*}" in
				H|N|R|G|B|Y) eval  "${color%=*}=$'\\e[${color#*=}m'"
			esac
		done
	} else
		H=$'\e[0;1m'
		N=$'\e[0;0m'
		R=$'\e[31;1m'
		G=$'\e[32;1m'
		B=$'\e[34;1m'
		Y=$'\e[33;1m'
		M=$'\e[35;1m'
	fi
fi

# Load patterns available in library path.
for lib in ${DTOOLS_LIB}/patterns/*.bash ~/.dtools/patterns/*.bash ; do
	[ "$lib" = "${DTOOLS_LIB}/patterns/*.bash" ] && continue
	[ "$lib" = ~/.dtools/patterns/"*.bash" ] && continue
	source "$lib" 2>/dev/null >/dev/null || \
		E=1 err "internal error on pattern definition ($lib)"
done

# Read the pattern passed to dt(1)
mapfile -t HOSTLIST < <(dt_pattern_filter "$1") && shift || \
    E=1 err "unable to parse hostlist for pattern ${1:-null}."

export HOSTLIST

# Read the command passed to dt(1)
${opt_p:-false} && command="list" || command="$1" ; shift
lib "commands/${command}.bash"   || \
    source "${PWD}/${command}.dt" 2>/dev/null >/dev/null || \
    E=2 err "unknown command ${command:-null}, maybe you forget 'ssh' word?"

fun run || E=1 err "the command \`${command}' has not run function."

# Here begin the crazy loop and also a random function to create exotic
# errors. :)
trap dt_bye EXIT
trap dt_bye TERM
let i=0
exec 3<&1

for h in "${HOSTLIST[@]}" ; do
	if ${interactive:-false}; then
		dt_run "${h}" "${@}" >&3
	else
		eval "coproc dt_$(dt_procname "$h") { dt_run  \""${h}"\" "${@}" >&3; }" 2>/dev/null
		# Save coprocs PIDs to wait for... and waiting if counter is raised.
		pids[${#pids[@]}]="$(eval echo \${dt_$(dt_procname "$h")_PID})"
		[ ${#pids[@]} -ge ${opt_C:-15} ] && wait "${pids[@]}" && pids=()
	fi
done

# Finally waits for orphan coprocs if presents
wait "${pids[@]}"
SUCCESS=0

